- decide what parts should be in C++ and what parts should be in Java
    - wanna demo cpp capabilities
    - however, time constraints mean certain areas should be done in Java
    - I have encountered starter codes for bluetooth camera.
        - in fact, a 2014 SO answer (https://stackoverflow.com/a/26059884) mentions that there's
          no direct NDK API for Android's Bluetooth.
          https://developer.android.com/ndk/reference/ seems to support this
          opinion.
        - seems like the camera might be in C++ but the bluetooth would need to be in Java
    - this SO post (https://stackoverflow.com/a/36802988) is very helpful on
      the theoretical workflow of setting up OpenCL projects on Android

- Bluetooth module should get 3.3V input but Uno R3 has 5V.
  http://www.martyncurrey.com/arduino-with-hc-05-bluetooth-module-in-slave-mode/
  says we should use voltage dividers to reduce the voltage
    - https://learn.sparkfun.com/tutorials/voltage-dividers/all has good
      explanation. Basically, V_{out} = V_{in} * \frac{R_2}{R_1 + R_2}. There's
      also online voltage divider calculators. However, while I can decide the
      ratio of resistor 1 & 2, I'm not sure how to choose their absolute values
      until I came across this SO post:
      https://electronics.stackexchange.com/a/28903. Basically, the 2 chosen
      bluetooth module's resistance should be as close to the module as
      possible to avoid wasting current but also as large as possible to .
    - in addition, the martyncurrey site says to just use 1k & 2k resistors

- just realized that both the camera and the bluetooth modules need to use the RX & TX ports. Googling turned up this (https://www.arduino.cc/en/Reference/softwareSerial) which is using a software library to make other digital ports emulate RX/TX but some forum post (https://forum.arduino.cc/index.php?topic=480844.0) suggests it's not good enough?

- read resistor bands left to right with closer bands being on left side; https://www.digikey.ca/en/resources/conversion-calculators/conversion-calculator-resistor-color-code-5-band helps me check that the bands are actually 1k & 2k

- TODO: https://github.com/arduino/arduino-cli/blob/master/CONTRIBUTING.md incorporate arduino-cli so that we can automate the arduino setup

** apparently boards with only 1 RX & TX can create conflicts if those HW ports are occupied while a sketch is being uploaded to the board (see https://www.instructables.com/id/Remotely-Control-LED-using-HC-05-Bluetooth-Arduino/)

** sample sketches using SoftSerial library did not work! SoftSerial is not reliable...
    - nope it was just me not understanding how serial ports worked at all...
    - tutorial http://www.martyncurrey.com/arduino-with-hc-05-bluetooth-module-in-slave-mode/ uses the HW serial port to communicate between PC and Uno R3 and a SW emulated serial port to communicate between Uno R3 and the HC05
    - AT commands work if you just hold down the small button on the HC05 module. You don't need to hold it all the time: just once when powering it up such that the blinker is once every 5s (enters AT mode) and then everytime you need to send it a command
** try https://www.pjrc.com/teensy/td_libs_AltSoftSerial.html which limits us to pin 8 & 9
    - this is a future TODO in case the default library is not fast enough

- https://www.arducam.com/arducam-bluetooth-module-wireless-image-system/ discusses the OV2640 camera's data transfer rate using different image capture configs; seems like we will be stretching the hardware to its limit. We need JPEG compression so that we send 3-6kBytes per frame instead of 150kBytes for a 320x240 image

- IMPORTANT: Arduino's USB communicates on UART serial protocol; if any module is sending data using port 0/1 then uploading sketches can fail

- IMPORTANT: use F() macros for Arduino debug statements

- actually ArduCAM has their own Github repo with a working bluetooth + camera arduino project
    - the working bluetooth camera project is for 2MP mini and not for 2MP mini plus; I have to ensure there's nothing breaking the code and/or circuits
        - so far, in arduino/libraries/ArduCAM/ArduCAM.h, we see that the mini has smaller frame buffer (384kb) compared to the mini plus (8Mb)

- USB connection to Android phone also counts as one of the /dev/ttyACM ports; don't get confused by Arduino upload not working

- actually we might just pivot and make the server on laptop; Android bluetooth serial ports cannot increase its baud rate beyond the default 115200 (see https://stackoverflow.com/a/23888958)
    - actually seems like the limit is just 115200... even opening bluetooth serial port on linux terminal and configuring the baud rate beyond 115200 we get garbage :(
    - then there's no point using desktop linux because both linux and Android phone will hit the 115200 data tranfer limit
TODO:   - the relationship between voltage divider resistor values and baud rate should be looked into but there's no time now
TODO:   - look into if breadboard's circuitry could affect baud rate; no time now
    - actually, the max limit is 230400 baud rate; not the best but I'll take what I can get

- there's a really helpful askubuntu post on working with bluetooth and opening serial ports (https://askubuntu.com/a/869951)

- Android programming might take a long time... I'll look into JPEG compression for now

** in the end, we are always communicating over serial port, whether it's implemented over bluetooth or USB changes little about the image analysis part
    - Android app + NDK is not looking good with given amount of time...

- debugging checklist:
    * did the Arduino IDE select the proper port? Between reconnects it could jump from ACM1 to ACM2; Restart the IDE if it cannot see the port but terminal can via "ls /dev/ttyACM*"
    * are all the cables connected properly? If you're on bluetooth-programming vs dashcam, there's different connectivities
        * also, if you're using the serial port for bluetooth transmissions to server, you can't upload via USB
    * is the uploaded Arduino sketch the one you wanted?
    * are the baud rates setup properly?
    * is the Android source code proper?

- TODO: for Android app: use the bluetooth skeleton and add another activity that will take from a sample opencl app

- TODO: think of how to validate the performance of our project
    - how many frames per second can the dashcam send over bluetooth? try different resolutions?
    - how much time would our app take to process each image?

